一、异常
1. Throwable=>Error/Exception
Error:是指Java运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。
		如果出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。
Exception：又分为运行时异常RuntimeException和编译时异常CheckedException。
		运行时异常：NullPointerException、ClassCastException
		编译时异常：IOException、SQLException、ClassNotFoundExcetion

2. 异常的处理方式
	1. 不进行具体处理，而是继续抛给调用者（throw、throws或者系统自动抛异常）
	2. try catch 捕获异常针对性处理

3. throw和throws的区别
	位置不同：
	1. throws用在函数上，后面跟的是异常类，可以多个；而throw用在函数内，后面跟的是异常对象。
	功能不同：
	2. throws用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方法；
		throw抛出具体的问题对象，执行到throw，功能就已经结束了，跳转到调用者，并将具体的问题对象抛给调用者。
	3. throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常对象。
	4. 两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理由函数的上层调用处理。

二、反射
	在Java中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，
都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java的反射机制。
1. 反射的应用场合
	1.1 编译时类型和运行时类型
		在Java程序中许多对象在运行时都会出现两种类型：编译时类型和运行时类型。编译时的类型由声明对象时使用的类型来决定，
	运行时的类型由实际赋值给对象的类型决定。如：
		Person p = new Student();
	其中编译时类型为Person，运行时类型为Student。
	1.2 程序在运行时还可能接收到外部传入的对象，该对象的编译时类型为Object，但是程序有需要调用该对象的运行时类型的方法。
	为了解决这些问题，程序需要在运行时发现对象和类的真实信息。然而编译时无法预知该对象和类属于哪些类，程序只能依靠云鑫时
	信息来发现该对象和类的真实信息，此时就必须使用到反射了。

2. 反射API
	1. Class类：反射的核心类，可以获取类的属性，方法等信息。
	2. Field类：Java.lang.reflect包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。
	3. Method类：Java.lang.reflect包中的类，表示类的方法，可以用来获取类中的方法信息或执行方法。
	4. Constructor类：Java.lang.reflect包中的类，表示类的构造方法。

3. 反射使用步骤（获取Class对象、调用对象方法）
	1.　获取想要操作的类的Class对象，它是反射的核心，通过Class对象可以任意调用类的方法。
	2. 调用Class类中的方法，即就是反射的使用阶段。
	3. 使用反射API来操作这些信息。

4. 获取Class对象的3种方法
	1. 调用某个对象的getClass方法
		Person p = new Person();
		Class clazz = p.getClass();
	2. 调用某个类的class属性来获取该类对应的Class对象
		Class clazz = Person.class；
	3. 使用Class类中的forName静态方法（最安全/性能最好）
		Class clazz = Class.forName("类的全路径"); // 最常用
	
	当获取了想要操作的类的Class对象后，可以通过Class类中的方法获取并查看该类中的方法和属性。
		// 获取Person类的Class对象
		Class clazz = Class.forName("reflection.Person");
		// 获取Person类的所有方法信息
		Method[] methods = clazz.getDealaredMethods();
		for(Method m : methods) {
			System.out.println(m.toString());
		}
		// 获取Person类的所有成员属性信息
		Field[] fields = clazz.getDealaredFields();
		for (Field f : fields) {
			System.out.println(f.toString());
		}
		// 获取Person类的所有构造方法信息
		Constructor[] constructors = clazz.getDealaredConstructors();
		for (Constructor c : constructors) {
			System.out.println(c.toString());
		}

5. 创建对象的两种方法
	1. Class对象的newInstance()
		使用Class对象的newInstance方法来创建该Class对象对应类的实例，但是这种方法要求该Class对象对应类有默认的空构造器。
	2. 调用Constructor对象的newInstance()
		先使用Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance方法创建Class对象对应类的实例，
	通过这个方法可以选定构造方法创建实例。
		// 获取Person类的Class对象
		Class clazz = Class.forName("reflection.Person");
		// 使用newInstance方法创建对象
		Person p = (Person)clazz.newInstance();
		// 获取构造方法
		Constructor c = clazz.getDealaredConstructors(String.class, String.class, int.class);
		// 创建对象并设置属性
		Person p1 = (Person)c.newInstance("李四", "男", 20);
	
三、注解
	注解是Java提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。Annotation是一个接口，程序可以通过反射来获取
指定程序中元素的Annotation对象，然后通过该Annotation对象来获取注解中的元数据信息。

1. 4种标准元注解
	元注解的作用是负责注解其他注解。
	1.1 @Target
		该注解说明了Annotation所修饰的对象范围：
		@Target(ElementType.TYPE) : 作用于接口、类、枚举、注解
		@Target(ElementType.FIELD) : 作用于属性字段、枚举的常量
		@Target(ElementType.METHOD) : 作用于方法
		@Target(ElementType.PARAMETER) : 作用于方法参数
		@Target(ElementType.CONSTRUCTOR) : 作用于构造函数
		@Target(ElementType.LOCAL_VARIABLE) : 作用于局部变量
		@Target(ElementType.ANNOTATION_TYPE) : 作用于注解（@Retention注解中就使用该属性）
		@Target(ElementType.PACKAGE) : 作用于包
		@Target(ElementType.TYPE_PARAMETER) :作用于类型泛型，即泛型方法、泛型类、泛型接口
		@Target(ElementType.TYPE_USE) : 类型使用。可以用于标注任意类型除了class
	1.2 @Retention
		该注解说明了注解的生命周期：
		@Retention(RetentionPolicy.SOURCE) : 在源文件中有效。注解仅存在于源码中，在class字节码文件中不包含
		@Retention(RetentionPolicy.CLASS) : 默认设置。在class文件中有效。注解会在class字节码文件中存在，但运行时无法获得
		@Retention(RetentionPolicy.RUNTIME) : 在运行时有效。注解会在class字节码文件中存在，在运行时可以通过反射获取到
		
		自定义注解肯定要使用@Retention(RetentionPolicy.RUNTIME)
	1.3 @Documented
		该注解的作用是将注解中的元素包含到javadoc中去。
	1.4 @Inherited
		该注解说明了被标注的类型是被继承的。如果一个使用了@Inherited修饰的注解类型被用于一个类，则这个注解将被用于该类的子类。
	
2. 注解处理器
	// 1. 定义注解
	@Target(ElementType.FIELD)
	@Retention(RetentionPolicy.RUNTIME)
	@Documented
	public @interface FruitProvider {
		/**供应商编号*/
		public int id() default -1;
		/*** 供应商名称*/
		public String name() default "";
		/*** 供应商地址*/
		public String address() default "";
	}
	// 2. 注解使用
	public class Apple {
		@FruitProvider(id=1, name="陕西红富士集团", address="陕西省西安市延安路")
		private String appleProvider;
		
		public void setAppleProvider(String appleProvider) {
			this.appleProvider = appleProvider;
		}
		
		public String getAppleProvider() {
			return appleProvider;
		}
	}
	// 3. 注解处理器
	public class FruitInfoUtil {
		public static void getFruitInfo(Class<?> clazz) {
			String strFruitProvider = "供应商信息-- ";
			Field[] fields = clazz.getDealaredFields(); // 通过反射获取处理注解
			for (Field field : fields) {
				if (field.isAnnotationPresent(FruitProvider.class)) {
					FruitProvider fruiProvider = (FruitProvider) field.getAnnotation(FruitProvider.class);
					strFruitProvider "供应商编号： " + fruiProvider.id() + " 供应商名称： " + fruiProvider.name
						+ " 供应商地址： " + fruiProvider.address();
					System.out.println(strFruitProvider);
				}
			}
		}
	}
	public class FruitRun {
		FruitInfoUtil.getFruitInfo(Apple.class);
		/***********输出结果***************/
		//供应商信息-- 供应商编号：1 供应商名称：陕西红富士集团 供应商地址：陕西省西安市延
	}

四、Java内部类
	Java类中不仅可以定义变量和方法，还可以定义类，这样定义在类内部的类就被称为内部类。
	内部类分为静态内部、成员内部类、局部内部类、匿名内部类。

五、Java泛型
	1. 泛型方法（<E>）
		public static < E > void printArray( E[] inputArray ) {
			for ( E element : inputArray ){
				System.out.printf( "%s ", element );
			}
		}
	2. 泛型类<T>
		public class Box<T> {
			private T t;
			public void add(T t) {
				this.t = t;
			}
			public T get() {
				return t;
			}
		}
	3. 类型通配符 ?

六、Java序列化

七、Java复制
	1. 直接赋值复制
		A a1 = a2;
		实际上复制的是引用。a1变化的时候，a2里面的成员变量也会变化。
	2. 浅复制（复制引用但不复制引用的对象）
		创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是值类型的，那么对该字段执行复制；如果该字段
	是引用类型的话，则复制引用而不复制引用的对象。因此，原始对象及其副本引用同一个对象。
		class Resume implements Cloneable {
			public Object clone() {
				try {
					return (Resume)super.clone();
				} catch (Exception e) {
					e.printStackTrace();
					return null;
				}
			}
		}
	3. 深复制（复制对象及其应用对象）
		不仅复制对象本身，而且复制对象包含的引用指向的所有对象。
		class Student implements Cloneable {
			String name;
			int age;
			Professor p;
			
			Student(String name, int age, Professor p) {
				this.name = name;
				this.age = age;
				this.p = p;
			}
			
			public Object clone() {
				Student o = null;
				try {
					o = (Student) super.clone();
				} catch (CloneNotSupportedException e) {
					System.out.println(e.toString());
				}
				o.p = (Professor)p.clone();
				return o;
			}
		}
	4. 序列化
		在Java中深复制一个对象，可以先使对象实现Serializable接口，然后把对象（实际上只是对象的一个拷贝）写到一个流中，
	再从流里读出来，便可以重建对象。
		public class Outer implements Serializable {
			private static final long serialVersionUID = 369285298572941L; // 最好是显式声明ID
			public Inner inner;

			// Description:[深度复制方法,需要对象及对象所有的对象属性都实现序列化]
			public Outer myclone() {
				Outer outer = null;
				try {
					// 将该对象序列化成流,因为写在流里的是对象的一个拷贝，而原对象仍然存在于JVM里面。所以利用这个特性可以实现对象的深拷贝
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					ObjectOutputStream oos = new ObjectOutputStream(baos);
					oos.writeObject(this);
					// 将流序列化成对象
					ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
					ObjectInputStream ois = new ObjectInputStream(bais);
					outer = (Outer) ois.readObject();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
				return outer;
			}
		}
		// Inner也必须实现Serializable，否则无法序列化
		public class Inner implements Serializable {
			private static final long serialVersionUID = 872390113109L; // 最好是显式声明ID
			public String name = "";

			public Inner(String name) {
				this.name = name;
			}

			@Override
			public String toString() {
				return "Inner的name值为：" + name;
			}
		}
