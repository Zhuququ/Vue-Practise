一、Spring特点
	轻量级、控制反转（低耦合、依赖注入是控制反转的重要手段）、面向切面（将应用业务逻辑和系统服务分开）、容器（使用容器包含和管理对象的配置和生命周期）、框架集合
	缺点：依赖反射
	
二、Spring Bean作用域
	singleton（单例）、prototype（原型）、request、session和global session。
	singleton：多线程下不安全。单例模式下，Spring IoC容器中只会存在一个共享的bean实例，无论有多少个Bean引用它，
			始终指向同一对象。
	prototype：原型模式下，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的bean实例，每一个bean实例
			都有自己的属性和状态，而singleton全局只有一个对象。
			根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton作用域。
	request：一次request一个实例。在一次HTTP请求中，容器会返回该bean的同一实例。
			而对不同的HTTP请求则会产生新的bean，而且该bean仅在当前HTTPrequest内有效，当前HTTP请求结束，该bean实例也会被销毁。
	session：在一次HTTP session中，容器会返回该bean的同一实例。
			而对不同的session请求则会产生新的bean，而且该bean仅在当前session内有效。
			同HTTP请求相同，每次session请求创建新的实例，而不同的实例之间不共享属性，且实例仅在自己的session请求中有效，
			当前请求结束，该bean实例也会被销毁。
	global session：在一个全局的HTTP session中，容器会返回该bean的同一个实例，仅在使用portlet context时有效。
	
		<bean id="loginAction" class="com.cnblogs.Login" scope="request"/>

三、Spring Bean生命周期
	1. 实例化
		实例化一个bean，也就是new
	2. bean属性注入
	3. 调用BeanNameAware的setBeanName
		如果bean实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是Spring配置文件中bean的id值。
	4. 调用BeanFactoryAware的setBeanFactory
		如果bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory，setBeanFactory(BeanFactory)传递的是Spring工厂本身
	（可以用这个方式来获取其他Bean，只需要在Spring配置文件中配置一个普通的bean就可以）。
	5. 调用ApplicationContextAware的setApplicationContext
		如果bean实现了ApplicationContextAware接口，会调用它实现的setApplicationContext(ApplicationContext)方法，
		传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）。
	6. 调用BeanPostProcess的postProcessBeforeInitialization
		如果bean实现了BeanPostProcess接口，会调用它实现的postProcessBeforeInitialization(Object o, String s)方法,
		该接口常被用作bean内容的更改，并且由于这个是在bean初始化结束时调用的方法，也可以被应用于内存或缓存技术。
	7. 如果bean实现了InitializingBean接口，会调用它实现的afterPropertiesSet方法。如果bean使用init-method声明了初始化方法，
		也会被调用
	8. 调用BeanPostProcess的postProcessAfterInitialization
		如果bean实现了BeanPostProcess接口，会调用它实现的postProcessAfterInitialization(Object o, String s)方法
	9. 至此，bean已经准备就绪了，可以被使用了。将一直驻留在应用上下文中，直到被销毁
	10. 当bean不再需要时，会经过清理阶段。如果bean实现了DisposableBean接口，会调用destory方法。
		同样，如果bean使用destory-method，该方法也会被调用。
		
四、Spring 依赖注入的四种方式
	1. 构造器注入
	2. setter方法注入
	3. 静态工厂注入
	4. 实例工厂注入

五、五种不同方式的自动装配
	1. no：通过设置ref属性进行装配
	2. byName：bean的autowire属性被设置为byName时，通过bean名称自动装配。
	3. byType:bean的autowire属性被设置为byType时，通过bean类型自动装配。如果有多个bean符合条件，则抛出错误。
	4. constructor：类似于byType，需要提供带参数的构造函数，通过构造函数的参数名在配置文件中找相应的bean。
	5. autodetect：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。

六、AOP主要应用场景：
	权限、缓存、错误处理、懒加载、调试、日志、事务、同步、持续化等等。

六、AOP核心概念：通过预编译方式和运行期间动态代理实现程序功能的统一维护。
	1. 切面（aspect）：一个关注点的模块化。
	2. 横切关注点：对哪些方法进行拦截，拦截后怎么处理。
	3. 连接点（joinpoint）：被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，
				实际上连接点还可以是字段或构造器。
	4. 切入点（pointcut）：对连接点进行拦截的定义。
	5. 通知（advice）：拦截到连接点后要执行的代码，分为前置、后置、异常、最终、环绕。
	6. 目标对象：被一个或多个切面所通知的对象。
	7. 织入（weave）：将切面应用到目标对象并创建一个被通知的对象。
	8. 引入（introduction）：在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段。
	
七、Spring MVC流程
	1. HTTP请求到DispatcherServlet（前端控制器，SpringMVC核心）:
		客户端请求提交到DispatcherServlet。
	2. HandlerMapping（处理器映射器）:
		由DispatcherServlet控制器通过HandlerMapping获取对应的处理器，找到处理请求的Controller。
	3. 调用处理器Controller
		DispatcherServlet将请求提交到Controller。
	4. Controller调用业务逻辑处理后，返回ModelAndView
	5. DispatcherServlet通过ViewResoler视图解析器，找到ModelAndView指定的视图。
	6. DispatcherServlet对视图进行渲染并将结果显示到客户端。
	
八、Spring Boot的特性
	1. 创建独立的Spring应用程序
	2. 内嵌Tomcat等servlet容器
	3. 提交starter以简化maven配置
	4. 自动配置Spring
	5. 提供生产就绪型功能，如指标、健康检测和外部配置
	6. 没有代码生成，不需要XML配置
	
九、@Value("${}")和@Value("#{}")的区别
	前者是获取配置文件中的属性值，后者是获取目标对象的属性的值

十、映射Web请求的注解
	@ResuestMapping、@GetMapping、@PostMapping、@PutMapping、@DeleteMapping
	
十一、控制器需要返回json或者xml时，使用哪个注解
	@ResponseBody
	
十二、@Controller+@ResponseBody相当于哪个注解
	@RestController

十三、接收路径参数的注解
	@PathVariable

十四、@Qualifier注解
	当创建多个相同类型的bean时，想要使用的指定bean时使用。
	
十五、事务保证用户操作的原子性、一致性、隔离性和持久性

十六、Mybatis缓存
	Mybatis中一级缓存和二级缓存，默认情况下一级缓存开启，并且不能关闭。一级缓存是指SqlSession级别的缓存，当在同一个
SqlSession中进行相同的SQL语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存1024条SQL。
二级缓存是指可以跨SqlSession的缓存，是mapper级别的缓存，对于mapper级别的缓存，不同的SqlSession是可以共享的。

十七、Mybatis一级缓存的原理
	第一次发出一个查询sql，sql查询结果写入sqlsession的一级缓存中，缓存使用的数据结果是一个map。
		key：MapperID+offset+limit+sql+所有的入参
		value：结果数据
	同一个sqlsession再次发出相同的sql，就从缓存中取出数据。但是如果两次中间出现commit操作（修改、添加、删除），则该sqlsession
	的一级缓存区域全部清空，下次再去缓存中查询就查询不到，所以会再次查询数据库，从数据库查询到再写入缓存。

十八、Mybaits二级缓存的原理
	二级缓存的范围是mapper级别（mapper同一个命名空间），mapper以命名空间为单位创建缓存，数据结构是map。mybatis的二级缓存
	是通过CacheExecutor实现的。CacheExecutor其实是Executor的代理对象。所有的查询操作，在CacheExecutor中都会先匹配缓存
	中是否存在，不存在则查询数据库。
	具体使用需要配置：
		1. mybatis全局配置中启用二级缓存配置
		2. 在对应的mapper.xml中配置cache节点
		3. 在对应的select查询节点中添加useCache=true
	
十九、Mybatis的优缺点
	优点：
		①配置完只要关注于sql即可
		②sql与Java代码分离，方便管理维护
		③支持动态sql
		④支持对象与数据库字段映射
	缺点：
		移植性差。sql依赖数据库。

二十、Mybaits中#{}和${}的区别
	前者是预编译处理，后者是字符串替换。一般使用前者，防止sql注入问题。

二十一、Mybatis的动态标签
	①
		<if test=""></if>
	②
		<choose>
			<when test=""></when>
			<otherwise></otherwise>
		</choose>
	③
		<where>
			<if></if>
		</where>
		或
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<if></if>
		</trim>
	④
		<set>
			<if></if>
		</set>
		或
		<trim prefix="SET" suffixOverrides=","></trim>
	⑤
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	⑥
		<bind name="userNameLike" value="'%" + userName + "%'" </bind>

二十二、Mybatis XML映射文件中有哪些标签
	select、insert、update、delete、resultMap、parameterMap、sql、include、selectKey、动态标签
	
二十三、如何获取自增主键
	①Mapper接口的方法上
		@Options(useGeneratedKeys=true, keyProperty="id")
		int insert();
	②Mapper XML里
		<insert id="insert" useGeneratedKeys="true" keyProperty="id"></insert>

二十四、当实体类属性名和表字段名不一致，怎么办
	①使用别名；②使用result标签进行映射

二十五、模糊查询
	①'%${}%' // 不推荐
	②concat('%', #{}, '%') // 但是Oracle只支持两个参数
	③like '%' || #{} || '%'
	④bind

二十六、nginx主要特征
	稳定性高、支持SSL和TLSSNL、支持热部署、免费开源、支持高并发负载均衡

二十七、nginx负载均衡几种模式/算法
	轮询模式、权重模式、IP散列模式、url_hash模式、fair模式

二十八、nginx的进程模型
	master-worker模式和单进程模式

二十九、nginx负载均衡实现过程
	
三十、Redis是什么
	Redis是一个基于键值对的NoSQL数据库，可用作数据库、缓存和消息代理。

三十一、Redis特性
	速度快、基于键值对、简单稳定、持久化、主从复制、高并发&分布式

三十二、Redis合适的应用场景
	缓存、排行榜、计数器、分布式会话、分布式锁、社交网络、最新列表、消息系统

三十三、Redis的数据类型
	String、Hash、List、Set、Zset、HyperLogLog、流等等

三十四、Redis的高级功能
	消息队列、有效性、事务、数据持久化、分布式锁等等

三十五、Dubbo 基于Java的高性能轻量级的RPC分布式服务框架

三十六、SpringBoot启动类注解
	@SpringBootConfiguration：组合了@Configuraton，实现配置文件的功能
	@EnableAutoConfiguration：打开自动配置的功能
	@ComponentScan：Spring组件扫描

三十七、SpringBoot支持的配置文件的格式
	properties和yaml

三十八、SpringBoot修改端口号
	配置文件中使用server.port；启动时 --server.port

三十九、什么是Spring Profiles
	不同的环境启用不同的配置。可用通过配置文件开启，也可以通过命令行。

四十、SpringBoot异常处理的相关注解
	@ControllerAdvice和@ExceptionHandler

