一、Java的三大特性
	封装、继承、多态

二、JDK和JRE的区别
	JDK：java开发工具包
	JRE：java运行环境
	JDK包含JRE，以及编译器，调试和分析工具等等。

三、Java基本数据类型及封装类
	byte（Byte）、short（Short）、int（Integer）、long（Long）、float（Float）、double（Double）、char（Char）、boolean（Boolean）

四、public static void main(String args[])这段声明中每个关键字的作用
	public：main方法是Java程序运行时调用的第一个方法，因此必须对Java环境可见。
	static：Java程序调用这个方法时，不会创建这个的类的一个实例，所以必须声明为静态方法。
	void：这个方法是没有返回值的。
	String args[]：说明从命令行传入的参数是字符串型，并且是数组。

五、==与equals的区别
	==比较的是两个对象的引用是否一样，即存储位置是否相同。
	equals比较的是内容，并且比较方式可以重写。默认的实现是和==一样的。

六、float f = 3.4; 是否正确
	不正确。3.4是双精度，要将double类型赋值给float型，需要强转类型，float f = (float)3.4或者float f = 3.4f。
	
七、short s1 = 1； s1 = s1 + 1; 有错吗
	由于1是int类型，所以short + 1的结果也是int型，如果要赋值给short型，需要强转类型 s1  = (short)(s1 + 1)。
如果是 s1 += 1 ，则不需要，因为 += 操作符会隐式自动类型转换。

八、final、finally、finalize的区别和用法
	final：一个修饰符也是一个关键字。
		修饰的类不能被继承。
		修饰的变量，如果是基本数据类型，则不能更改，如果是引用类型，则不能指向另一个对象。
		修饰的方法，不能被重写，但是可以重载。
	finally：一个关键字。
		处理异常时可以添加finally块，来执行最后的操作。
	finalize：是Object类中的protected方法。GC在回收对象之前会调用该方法。可以子类重写。

九、hashCode和equals的区别
	①equals方法一般比较全面比较复杂，而hashCode中只要生成一个hash值进行比较就可以了，效率较高。
	②hashCode虽然效率高些，但是不完全可靠，有时候不同的对象生成的hashcode也会一样。
	总结：
		equals相等的两个对象它们的hashCode肯定相等，也就是equals对比是绝对可靠的。
		hashCode相等的两个对象它们的equals不一定相等，也就是hashCode不是绝对可靠的。
	p.s. ①当类被放在HashTable、HashMap、HashSet等hash结构的集合时，需要重写hashCode。
		②如果重写的equals，则必须要重写hashCode，因为equals是基于对象的内容实现的，
		如果hashCode不变，则可能两个对象明明相等了，但是hashCode不一样。

十、Java中操作字符串的类，以及区别
	String、StringBuffer、StringBuilder
	String声明的是不可变的对象，每次操作都会生成新的String对象。而后两者可以在原有对象的基础上进行操作。
	StringBuffer是线程安全的，而StringBuilder是非线程安全的，但是性能要高于前者。所以多线程使用StringBuffer,而单线程使用后者。
	
十一、String str = "a"和String str = new String("a")一样吗
	不一样，因为前者分配在常量池，而后者分配在堆内存。

十二、final能修饰抽象类吗
	不能。final修饰的类不能被继承，而抽象类就是需要继承的。

十三、static关键字
	①抽象的方法可以同时静态吗
		抽象方法就是要被重写的，而静态方法不能重写，所以不可以
	②是否可以从一个静态方法内部发出对非静态方法的调用
		不可以，静态方法只能访问静态成员，而非静态方法的调用需要先创建对象
	③static可以修饰局部变量吗
		不允许用来修饰局部变量
	④内部类和静态内部类的区别
		静态内部类相对于外部类是独立存在的，在静态内部类中无法直接访问外部类的变量、方法。如果要访问的话，需要实例一个外部类对象，
	但是可以直接访问静态的变量、调用静态的方法。
		普通内部类是作为外部类的一个成员存在的，在内部类中可以直接访问外部类属性，调用外部类的方法。
	如果外部类要访问内部类的属性或者调用方法的话，需要创建一个内部类对象。
		如果其他类要访问普通内部类的属性或者方法的话，必须在外部类中创建一个普通内部类的对象作为一个属性，其他类就可以通过该属性
	调用内部类的方法或者访问属性
		如果其他类想要访问静态内部类的属性或者调用方法，直接创建一个静态内部类对象即可
	⑤可以覆盖一个private或者static方法吗
		static方法不能被覆盖，因为方法覆盖是运行时动态绑定的，而static方法是编译时静态绑定的。
		
十四、重载和重写
	都是实现多态的方式，前者是编译时的多态性，后者是运行时的多态性。
	重载发生在一个类中，同名的方法可以有不同的参数列表（类型，个数）。
	而重写发生在子父类继承中，子类可以重写父类的方法，要求参数一致，以及有兼容的返回类型，更好的访问，不能有更多的异常。
	重载不能以返回类型进行区分。
	
十五、如果有些字段不想序列化
	可以在字段前加上 transient 关键字。
	
十六、Java中Comparator与Comparable的不同
	Comparator用来定义用户定制的顺序，是比较接口。而Comparable是用来定义对象的自然接口，是排序接口。
	如果需要控制某个类的次序，但是该类本身不支持排序（即没有实现Comparable接口），则可以建立一个comparator来进行排序。
	Comparable总是只有一个，但是可以有多个Comparator来定义对象的顺序。
	
十七、Collection和Collections的区别
	前者是集合接口，提供了对集合对象进行基础操作的通用接口方法。
	后者是一个包装类，包含了很多静态方法，不能被实例化。

十八、List、Set、Map是否继承自Collection接口
	前两者是，Map不是。

十九、Collections.sort排序的内部原理
	Java6中是归并排序，Java7中是TimSort。
	
二十、List、Set、Map的区别
	List是有序的、可重复的。
	Set是不可重复的，AbstractSet/HashSet是无序，TreeSet是有序的。
	Map的Key是唯一的，Value可重复，AbstractMap/HashMap是无序的，TreeMap是有序的。

二十一、HashMap和HashTable的区别
	前者允许key和value为null，而后者不可以。
	后者是同步的，所以适合多线程。前者适合单线程。
	HashTable的无序的，Hash Map可以转为LinkedHashMap，从而遍历。

二十二、HashMap的实现原理
	HashMap基于Hash算法实现，通过put(key,value)存储，get(key)获取。当传入key时，根据key的hash值，将value保存到bucket中。
	当计算出的hash值相同时，也就是发生hash冲突，HashMap用链表和红黑树存储相同的hash值的value。当hash冲突的个数较少时，
	使用链表否则使用红黑树。

二十三、HashSet的实现原理
	HashSet是基于HashMap实现的，底层使用HashMap来保存所以元素，相关的操作，基本上都是直接调用底层HashMap的相关方法来完成，
	Hash Set不允许重复的值。

二十四、ArrayList和LinkedList的区别
	数据结构：前者是动态数组，后者是双向链表
	随机访问效率：前者更高，因为后者是线性的数据存储方式，需要移动指针依次查找
	增删效率：在非首位的增删操作，后者更高效，因为ArrayList的增删要影响数组内的其他数据的下标
	频繁读取集合中的元素时，使用ArrayList，在插入删除较多操作时，使用LinkedList

二十五、ArrayList和Vector区别
	相同点：
		都是基于索引，内部由一个数组支持，可以使用索引对元素进行访问
		维护插入的顺序，可以根据插入顺序获取元素
		迭代器实现都是fail-fast
		都允许null
	不同点：
		后者是同步的，所以访问效率上比前者低
		前者更加通用，可以使用Collectiions类获取信息
	
二十六、Array和ArrayList的区别
	前者存储基本数据类型和对象，后者只能存储对象
	前者指定固定大小，后者大小是自动扩展的
	后者的内置方法更多

二十七、Queue中poll方法和remove方法的区别
	相同点：都返回第一个元素，并在队列中删除返回的对象
	不同点：如果没有元素，前者返回null，后者会抛出异常

二十八、LinkedHashMap有什么特点
	是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。
	
二十九、HashMap的多线程问题
	当多个线程同时对HashMap进行put操作，可能会同时做扩容再ReHash的动作，这样就会导致循环链表的出现，当调用get去查找时，
	就出现死循环。可以使用ConcurentHashMap解决。
	
三十、什么时候会抛出StackOverflowError
	如果线程请求的栈深度大于JVM允许的深度，则抛出StackOverflowError

	如何实现栈溢出：main方法中调用一个方法，这个方法又调用自身
	public static void main(String[] args) {
		eat();
	}
	public staitc void eat() {
		eat();
	}

三十一、除了哪个区域外，虚拟机内存其他运行时区域都会发生OutOfMemoryError
	程序计数器
	
三十二、什么情况下会出现堆内存溢出
	堆内存中存放着所有创建的对象，只要创建的对象数量到达堆容量限制后，就会产生内存溢出异常。
	
	如何实现一个堆内存溢出（OutOfMemoryError）
	public static void main(String[] args) {
		List list = new ArrayList();
		while(true) {
			list.add(new Cat());
		}
	}
	
三十三、空间什么情况下会抛出OutOfMemoryError
	如果JVM在扩展栈时无法申请到足够的内存空间，就会抛出溢出。

三十四、垃圾标记阶段
	在GC执行垃圾回收之前，会区分对象存活与否，当对象被标记为死亡时，GC才会执行垃圾回收。

三十五、标记的两种方法
	①引用计数法：如果对象A被任意一个对象引用了，则A的引用计数器就会加1，当引用失效时，减1，当技术器为0时，就可以对其回收。
				缺点是无法解决循环引用的问题。
	②跟搜索算法：以跟为起始点，按照从上到下的方式，搜索被跟对象集合所连接的目标对象是否可达到，如果目标对象不可到达，
				就意味着该对象已死亡，被标记为垃圾对象。

三十六、三种常见的垃圾收集算法
	①标记-清除算法：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记对象。
					缺点是效率不高，清除后内存出现大量碎片。
	②复制算法：将可用内存分为大小相同的两块，每次只使用其中一块，当这一块用完后，就将还存活的对象复制到另一块上，
				然后把以使用过的空间一次清理掉。
				优点是解决了碎片化问题，但是将内存缩小，存活对象越多效率越低。
	③标记-压缩算法：先标记出待回收对象，然后让所有存活对象往一端移动，然后直接清理边界以外的内存。

三十七、垃圾收集器：收集算法的实现。（在进行垃圾收集时，必须暂停其他所有工作线程-Stop The World）
	①Serial收集器：单线程收集器。收集垃圾时，需要暂停所有工作线程，效率较差。
	②PartNew收集器：多线程版Serial收集器。采用并行收回的方式。
	③Parallel Scavenge收集器：新生代收集器，也是复制算法的收集器，也是多线程并行收集器。
	④Parallel Old收集器：使用多线程和标记-压缩算法。
	...
	
三十八、三范式
	①所有属性都要满足原子性
	②主键约束
	③消除字段的冗余性

三十九、NULL和空串（SQL方面）
	Null是没有值，空串是个有效值。判断Null需要用is null或者is not null。

四十、事务的特性
	原子性、一致性、隔离性、持久性

四十一、为什么设置主键
	保证了表的唯一性，使表的删改查更加快速，以及确保操作数据范围安全。

四十二、字段为什么建议设为not null
	null值会占用更多的字节，且会在程序中造成很多与预期不符的情况。

四十三、视图是什么，优势有哪些
	视图是一种虚拟的表，视图中的行列以及数据都是使用视图时动态生成的。
	①简单：对于使用者来说，不会关系表的结构、条件，就是一个过滤好的结果集
	②安全：使用者只能访问被允许查询的结果集
	③数据独立：视图结构确定后，源表的增加列对视图没有影响，而源表修改列名，则可用通过修改视图来解决，对使用者没有影响