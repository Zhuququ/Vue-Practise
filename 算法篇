一、排序算法
1、冒泡排序 稳定排序
	public static void bubbleSort(int[] array) {
		if (array == null || array.length < 2) return;
		// 第i趟
		for (int i = 0; i < array.length - 1; i++) {
			// 比较相邻的两个数，左>右，则交换
			for (int j = 0; j < array.length - 1 - i; j++) {
				if (array[j] > array[j + 1]) { // 升序。降序则改为 < 
					int temp = array[j + 1];
					array[j + 1] = array[j];
					array[j] = temp;
				}
			}
		}
	}

2、插入排序 稳定排序
	从队列中第二个数开始，每次将当前循环的对象，与前面的数进行比较，如果大于（或小于），则交换。
	public static void insertSort(int[] array) {
		for (int i = 1; i < array.length; i++) {
			int j = i;
			while(j > 0) {
				if (array[j] < array[j - 1]) { // 升序。降序则改为 > 
					int temp = array[j];
					array[j] = array[j - 1];
					array[j - 1] = temp;
					j--;
				} else {
					break;
				}
			}
		}
	}

3、快速排序 不稳定排序
	利用一个基准值，从右往左寻找比基准值小的值，从左往右寻找比基准值大的值，进行交换，重复递归，直到左右重合。再将重合的左侧和右侧进行以上操作。
	public static void quickSort(int[] array, int start, int end) {
		// 如果子序列只有一个或没有元素，则不进行下面的操作
		if (start < end) {
			int left = start;
			int right = end;
			int pivot = array[start]; // 基准值
			// 从左右两侧交替寻找，直到左右重合
			while(left < right) {
				// 从右往左寻找比基准值小的index
				while(left < right && array[right] >= pivot) { // 升序。降序则改为 <=
					// 如果没找到，则继续往左找
					right--;
				}
				// 找到这种元素将array[right]放入array[left]中，或者左右重合
				array[left] = array[right];
				// 同理，从左往右寻找比基准值大的index
				while(left < right && array[left] <= pivot) { // 升序。降序则改为 >=
					// 没找到，则继续往后找
					left++;
				}
				// 找到这种元素将array[left]放入array[right]中，或者左右重合
				array[right] = array[left];
			}
			// 基准值归位
			array[left] = pivot;
			// 此时，left==right，将重合的左侧和右侧进行递归
			quickSort(array, start, left - 1);
			quickSort(array, left + 1, end);
		}
	}
	
4、希尔排序（升级版的插入排序）不稳定排序
	设置增量，进行插入排序
	public static void shellSort(int[] array) {
		// 增量逐渐减少，直到为1
		for (int gap = array.length; gap > 0; gap /= 2) {
			// 从第gap个元素开始，与前面为gap length的元素比较
			for (int i = gap; i < array.length; i++) {
				int j = i;
				// 保证j-gap没有越界
				// 升序：j的值 大于 j-gap的值时，则交换
				while ((j - gap) >= 0 && array[j] < array[j - gap]) { // 升序。降序则改为 >
					int temp = array[j];
					array[j] = array[j - gap];
					array[j - gap] = temp;
					// j跳到前一个元素
					j -= gap;
				}
			}
		}
	}

5、归并排序 稳定排序
	先分割数组，再排序归并。
	public static void mergeSort(int[] array) {
		// 分割数组
		splitArray(array, 0, array.length - 1);
	}
	public static void splitArray(int[] array, int left, int right) {
		// 如果左右没有重合
		if (left < right) {
			int mid = (left + right) / 2;
			// 分成左右两个数组，进行分割，直到只有一个元素
			// 左
			splitArray(array, left, mid);
			// 右
			splitArray(array, mid + 1, right);
			// 归并
			mergeArray(array, left, mid, mid + 1, right);
		}
	}
	public static void mergeArray(int[] array, int leftStart, int leftEnd, int rightStart, int rightEnd) {
		// 设置临时数组，长度是两个合并数组的总长
		int[] tempArray = new int[rightEnd - leftStart + 1];
		int k = 0;
		// 分别获取两个数组的第一个元素index
		int lFirstIdx = leftStart;
		int rFirstIdx = rightStart;
		// 确认有一个数组循环到最后一个
		while (lFirstIdx <= leftEnd && rFirstIdx <= rightEnd) {
			// 比较最小值，将较小的值放入数组
			if (array[lFirstIdx] > array[rFirstIdx]) { // 升序。降序则改为 <
				tempArray[k++] = array[rFirstIdx++];
			} else {
				tempArray[k++] = array[lFirstIdx++];
			}
		}
		// 将剩下有元素的数组中元素都放到临时数组中（只会执行一个分值，因为只会有一个数组会剩下元素）
		while (lFirstIdx <= leftEnd) {
			tempArray[k++] = array[lFirstIdx++];
		}
		while (rFirstIdx <= rightEnd) {
			tempArray[k++] = array[rFirstIdx++];
		}
		// 将临时数组中的值放到原数组中（区间： [leftStart, rightEnd]）
		k = leftStart;
		for (int temp : tempArray) {
			array[k++] = temp;
		}
	}

二、搜索算法
1、二分查找
	要求查找的序列必须按照关键字有序。
	从数组的中间开始找，通过将搜索的数组减半而有效的搜索对象。
	①. 基本算法
	public static int binarySearch(int[] array, int target) {
		int left = 0;
		int right = array.length - 1;
		int mid;
		
		while (left <= right) {
			mid = (left + right)/2;
			if (array[mid] == target) {
				return mid;
			} else if (array[mid] < target) {
				left = mid + 1;
			} else if (array[mid] > target) {
				right = mid - 1;
			}
		}
		return -1;
	}
	②. 寻找左侧边界的二分搜索
	public static int binarySearchWithLeft(int[] array, int target) {
		if (array.length == 0) return -1;
		int left = 0;
		int right = array.length;
		
		while(left < right) {
			int mid = (left + right)/2;
			if (array[mid] == target) {
				right = mid; // 将搜索区间变为 [left, mid)
			} else if (array[mid] < target) {
				left = mid + 1;
			} else if (array[mid] > target) {
				right = mid;
			}
		}
		if (left == array.length) return -1;
		return array[left] == target ? left : -1;
	}
	③. 寻找右侧边界的二分搜索
	public static int binarySearchWithLeft(int[] array, int target) {
		if (array.length == 0) return -1;
		int left = 0;
		int right = array.length;
		
		while(left < right) {
			int mid = (left + right)/2;
			if (array[mid] == target) {
				left = mid + 1; // 将搜索区间变为 [mid+1, right)
			} else if (array[mid] < target) {
				left = mid + 1;
			} else if (array[mid] > target) {
				right = mid;
			}
		}
		// 终止条件：left==right，即找到最后一个值了
		if (left == 0) return -1;
		return array[left - 1] == target ? (left - 1) : -1;
	}
	
2、